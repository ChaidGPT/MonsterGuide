{
    "sourceFile": "games/snake/snake.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1701573633150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1701643783722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,13 @@\n     foodX = Math.floor(Math.random() * 30) + 1;\r\n     foodY = Math.floor(Math.random() * 30) + 1;\r\n }\r\n const handleGameOver = () => {\r\n+    // Play game over splat\r\n+    const gameOverSound = document.getElementById('gameOverSound');\r\n+    if (gameOverSound) {\r\n+        gameOverSound.play();\r\n+    }\r\n     // Clearing the timer and reloading the page on game over\r\n     clearInterval(setIntervalId);\r\n     alert(\"Game Over! Press OK to replay...\");\r\n     location.reload();\r\n"
                },
                {
                    "date": 1701644112474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     foodX = Math.floor(Math.random() * 30) + 1;\r\n     foodY = Math.floor(Math.random() * 30) + 1;\r\n }\r\n const handleGameOver = () => {\r\n-    // Play game over splat\r\n+    // Play game over sound\r\n     const gameOverSound = document.getElementById('gameOverSound');\r\n     if (gameOverSound) {\r\n         gameOverSound.play();\r\n     }\r\n"
                },
                {
                    "date": 1701644900164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,12 +22,19 @@\n     const gameOverSound = document.getElementById('gameOverSound');\r\n     if (gameOverSound) {\r\n         gameOverSound.play();\r\n     }\r\n-    // Clearing the timer and reloading the page on game over\r\n+    \r\n+    // Show Bootstrap modal\r\n+    $('#gameOverModal').modal('show');\r\n+\r\n+    // Clearing the timer (if needed) - adjust as per your requirements\r\n     clearInterval(setIntervalId);\r\n-    alert(\"Game Over! Press OK to replay...\");\r\n-    location.reload();\r\n+    \r\n+    // Optionally, you can reload the page after the modal is closed\r\n+    $('#gameOverModal').on('hidden.bs.modal', function () {\r\n+        location.reload();\r\n+    });\r\n }\r\n const changeDirection = e => {\r\n     // Changing velocity value based on key press\r\n     if(e.key === \"ArrowUp\" && velocityY != 1) {\r\n"
                },
                {
                    "date": 1701645134408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,25 +17,21 @@\n     foodX = Math.floor(Math.random() * 30) + 1;\r\n     foodY = Math.floor(Math.random() * 30) + 1;\r\n }\r\n const handleGameOver = () => {\r\n-    // Play game over sound\r\n+    // Play game over sound only if not already played\r\n     const gameOverSound = document.getElementById('gameOverSound');\r\n-    if (gameOverSound) {\r\n+    if (gameOverSound && !gameOver) {\r\n         gameOverSound.play();\r\n     }\r\n-    \r\n-    // Show Bootstrap modal\r\n-    $('#gameOverModal').modal('show');\r\n \r\n-    // Clearing the timer (if needed) - adjust as per your requirements\r\n+    // Clearing the timer and reloading the page on game over\r\n     clearInterval(setIntervalId);\r\n-    \r\n-    // Optionally, you can reload the page after the modal is closed\r\n-    $('#gameOverModal').on('hidden.bs.modal', function () {\r\n-        location.reload();\r\n-    });\r\n+    gameOver = true; // Set gameOver to true to prevent multiple plays\r\n+    alert(\"Game Over! Press OK to replay...\");\r\n+    location.reload();\r\n }\r\n+\r\n const changeDirection = e => {\r\n     // Changing velocity value based on key press\r\n     if(e.key === \"ArrowUp\" && velocityY != 1) {\r\n         velocityX = 0;\r\n"
                },
                {
                    "date": 1701645286284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,13 +23,15 @@\n     if (gameOverSound && !gameOver) {\r\n         gameOverSound.play();\r\n     }\r\n \r\n+    // Open the game over modal\r\n+    $('#gameOverModal').modal('show');\r\n+\r\n     // Clearing the timer and reloading the page on game over\r\n     clearInterval(setIntervalId);\r\n     gameOver = true; // Set gameOver to true to prevent multiple plays\r\n-    alert(\"Game Over! Press OK to replay...\");\r\n-    location.reload();\r\n+    // location.reload(); // You can choose to reload the page or not, depending on your preference\r\n }\r\n \r\n const changeDirection = e => {\r\n     // Changing velocity value based on key press\r\n"
                }
            ],
            "date": 1701573633149,
            "name": "Commit-0",
            "content": "const playBoard = document.querySelector(\".play-board\");\r\nconst scoreElement = document.querySelector(\".score\");\r\nconst highScoreElement = document.querySelector(\".high-score\");\r\nconst controls = document.querySelectorAll(\".controls i\");\r\nlet gameOver = false;\r\nlet foodX, foodY;\r\nlet snakeX = 5, snakeY = 5;\r\nlet velocityX = 0, velocityY = 0;\r\nlet snakeBody = [];\r\nlet setIntervalId;\r\nlet score = 0;\r\n// Getting high score from the local storage\r\nlet highScore = localStorage.getItem(\"high-score\") || 0;\r\nhighScoreElement.innerText = `High Score: ${highScore}`;\r\nconst updateFoodPosition = () => {\r\n    // Passing a random 1 - 30 value as food position\r\n    foodX = Math.floor(Math.random() * 30) + 1;\r\n    foodY = Math.floor(Math.random() * 30) + 1;\r\n}\r\nconst handleGameOver = () => {\r\n    // Clearing the timer and reloading the page on game over\r\n    clearInterval(setIntervalId);\r\n    alert(\"Game Over! Press OK to replay...\");\r\n    location.reload();\r\n}\r\nconst changeDirection = e => {\r\n    // Changing velocity value based on key press\r\n    if(e.key === \"ArrowUp\" && velocityY != 1) {\r\n        velocityX = 0;\r\n        velocityY = -1;\r\n    } else if(e.key === \"ArrowDown\" && velocityY != -1) {\r\n        velocityX = 0;\r\n        velocityY = 1;\r\n    } else if(e.key === \"ArrowLeft\" && velocityX != 1) {\r\n        velocityX = -1;\r\n        velocityY = 0;\r\n    } else if(e.key === \"ArrowRight\" && velocityX != -1) {\r\n        velocityX = 1;\r\n        velocityY = 0;\r\n    }\r\n}\r\n// Calling changeDirection on each key click and passing key dataset value as an object\r\ncontrols.forEach(button => button.addEventListener(\"click\", () => changeDirection({ key: button.dataset.key })));\r\nconst initGame = () => {\r\n    if(gameOver) return handleGameOver();\r\n    let html = `<div class=\"food\" style=\"grid-area: ${foodY} / ${foodX}\"></div>`;\r\n    // Checking if the snake hit the food\r\n    if(snakeX === foodX && snakeY === foodY) {\r\n        updateFoodPosition();\r\n        snakeBody.push([foodY, foodX]); // Pushing food position to snake body array\r\n        score++; // increment score by 1\r\n        highScore = score >= highScore ? score : highScore;\r\n        localStorage.setItem(\"high-score\", highScore);\r\n        scoreElement.innerText = `Score: ${score}`;\r\n        highScoreElement.innerText = `High Score: ${highScore}`;\r\n    }\r\n    // Updating the snake's head position based on the current velocity\r\n    snakeX += velocityX;\r\n    snakeY += velocityY;\r\n    \r\n    // Shifting forward the values of the elements in the snake body by one\r\n    for (let i = snakeBody.length - 1; i > 0; i--) {\r\n        snakeBody[i] = snakeBody[i - 1];\r\n    }\r\n    snakeBody[0] = [snakeX, snakeY]; // Setting first element of snake body to current snake position\r\n    // Checking if the snake's head is out of wall, if so setting gameOver to true\r\n    if(snakeX <= 0 || snakeX > 30 || snakeY <= 0 || snakeY > 30) {\r\n        return gameOver = true;\r\n    }\r\n    for (let i = 0; i < snakeBody.length; i++) {\r\n        // Adding a div for each part of the snake's body\r\n        html += `<div class=\"head\" style=\"grid-area: ${snakeBody[i][1]} / ${snakeBody[i][0]}\"></div>`;\r\n        // Checking if the snake head hit the body, if so set gameOver to true\r\n        if (i !== 0 && snakeBody[0][1] === snakeBody[i][1] && snakeBody[0][0] === snakeBody[i][0]) {\r\n            gameOver = true;\r\n        }\r\n    }\r\n    playBoard.innerHTML = html;\r\n}\r\nupdateFoodPosition();\r\nsetIntervalId = setInterval(initGame, 100);\r\ndocument.addEventListener(\"keyup\", changeDirection);"
        }
    ]
}