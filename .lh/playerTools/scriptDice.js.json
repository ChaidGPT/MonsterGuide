{
    "sourceFile": "playerTools/scriptDice.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1693677295003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1694652057213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n       const rollResultParagraph = document.createElement(\"p\");\r\n   \r\n       // Append the current roll results to the diceResults container\r\n       const diceResultsContainer = document.getElementById(\"diceResults\");\r\n-      diceResultsContainer.appendChild(rollResultParagraph);\r\n+      diceResultsContainer.prepend(rollResultParagraph);\r\n   \r\n       // Create an audio element for the dice sound\r\n       const diceSound = new Audio();\r\n       diceSound.src = \"sounds/dice.mp3\";\r\n"
                }
            ],
            "date": 1693677295002,
            "name": "Commit-0",
            "content": "//Dice rolling code\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n    const diceResultsContainer = document.getElementById(\"diceResults\");\r\n    const clearButton = document.querySelector('[aria-label=\"Clear button\"]');\r\n    const form = document.querySelector(\"form\"); // Reference to the form element\r\n  \r\n    // Function to update Clear button visibility\r\n    function updateClearButtonVisibility() {\r\n      clearButton.style.display =\r\n        diceResultsContainer.children.length > 0 ? \"block\" : \"none\";\r\n    }\r\n  \r\n    // Clear button click event\r\n    clearButton.addEventListener(\"click\", function () {\r\n      diceResultsContainer.innerHTML = \"\"; // Clear the displayed results\r\n      updateClearButtonVisibility(); // Update the Clear button visibility\r\n    });\r\n  \r\n    // Form submission event\r\n    form.addEventListener(\"submit\", function (event) {\r\n      event.preventDefault(); // Prevent the form from submitting normally\r\n  \r\n      const numDiceInput = document.getElementById(\"dieNum\");\r\n      const numDice = parseInt(numDiceInput.value);\r\n  \r\n      if (isNaN(numDice) || numDice <= 0) {\r\n        alert(\"Please enter a valid number of dice.\");\r\n        numDiceInput.focus(); // Set focus on the input\r\n        return;\r\n      }\r\n  \r\n      const dieType = parseInt(document.getElementById(\"dieType\").value);\r\n      const modifierType = document.getElementById(\"modifierType\").value;\r\n      const modifierNumberInput = document.getElementById(\"modifierNumber\");\r\n  \r\n      let modifierNumber = 0; // Default value if no modifier is selected\r\n  \r\n      // Parse modifierNumber only if a modifier is selected\r\n      if (modifierType !== \"none\") {\r\n        modifierNumber = parseInt(modifierNumberInput.value);\r\n  \r\n        // Validate modifierNumber\r\n        if (isNaN(modifierNumber)) {\r\n          alert(\"Please enter a valid modifier number.\");\r\n          modifierNumberInput.focus(); // Set focus on the input\r\n          return;\r\n        }\r\n      }\r\n  \r\n      const rolls = []; // To store individual roll results\r\n      let totalRoll = 0;\r\n  \r\n      for (let i = 0; i < numDice; i++) {\r\n        const rollResult = Math.floor(Math.random() * dieType) + 1;\r\n        rolls.push(rollResult); // Store individual roll result\r\n        totalRoll += rollResult;\r\n      }\r\n  \r\n      if (modifierType === \"plus\") {\r\n        totalRoll += modifierNumber;\r\n      } else if (modifierType === \"minus\") {\r\n        totalRoll -= modifierNumber;\r\n      }\r\n  \r\n      // Construct the message including individual rolls and modifier information if applicable\r\n      let message = `Rolling ${numDice} D${dieType}`;\r\n      if (modifierType !== \"none\") {\r\n        message += ` with a modifier of ${modifierType} ${modifierNumber}`;\r\n      }\r\n  \r\n      // Create a new <p> element to display the current roll results\r\n      const rollResultParagraph = document.createElement(\"p\");\r\n  \r\n      // Append the current roll results to the diceResults container\r\n      const diceResultsContainer = document.getElementById(\"diceResults\");\r\n      diceResultsContainer.appendChild(rollResultParagraph);\r\n  \r\n      // Create an audio element for the dice sound\r\n      const diceSound = new Audio();\r\n      diceSound.src = \"sounds/dice.mp3\";\r\n      const criticalSuccessSound = new Audio();\r\n      criticalSuccessSound.src = \"sounds/yay.mp3\";\r\n      const criticalFailureSound = new Audio();\r\n      criticalFailureSound.src = \"sounds/boo.mp3\";\r\n  \r\n      // Display individual rolls one by one with a delay\r\n      let currentDelay = 500;\r\n      rolls.forEach((roll, index) => {\r\n        setTimeout(() => {\r\n          const currentRolls = rolls.slice(0, index + 1).join(\", \");\r\n          rollResultParagraph.innerHTML = `${message} for individual rolls: ${currentRolls}`;\r\n          diceSound.play(); // Play sound effect with each roll\r\n        }, currentDelay);\r\n        currentDelay += 500; // Increment the delay for the next roll\r\n      });\r\n  \r\n      // Display the final total roll after all individual rolls\r\n      setTimeout(() => {\r\n        let finalMessage = `${message} for individual rolls: ${rolls.join(\", \")}`;\r\n  \r\n        if (numDice === 1 && dieType === 20) {\r\n          if (rolls[0] === 1) {\r\n            finalMessage +=\r\n              '<span class=\"critical-failure\"> - Critical Failure!</span>';\r\n            criticalFailureSound.play();\r\n          } else if (rolls[0] === 20) {\r\n            finalMessage +=\r\n              '<span class=\"critical-success\"> - Critical Success!</span>';\r\n            criticalSuccessSound.play();\r\n          }\r\n        }\r\n  \r\n        finalMessage += ` (Total: ${totalRoll})`;\r\n  \r\n        rollResultParagraph.innerHTML = finalMessage;\r\n  \r\n        // After displaying results, update Clear button visibility\r\n        updateClearButtonVisibility();\r\n      }, currentDelay + 500); // Wait a bit longer for the last message\r\n    });\r\n  });"
        }
    ]
}